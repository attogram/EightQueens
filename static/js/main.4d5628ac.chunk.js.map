{"version":3,"sources":["queenUnderAttack.svg","UnderAttack.js","helpers.js","DidYouKnow.js","Status.js","Timer.js","Title.js","EightQueens.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","underAttack","position","attacked","positionArray","Object","keys","forEach","square","paths","i","col","substr","row","parseInt","queenPaths","push","numberToAlpha","colWalk","rowStart","rowWalk","incrementAlpha","decrementAlpha","getQueenPaths","some","r","indexOf","number","alpha","String","fromCharCode","charCodeAt","COLUMNS","split","isString","s","pieceCodeToFen","piece","pieceCodeLetters","toUpperCase","toLowerCase","tidbits","DidYouKnow","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tidbit","tick","bind","assertThisInitialized","timer","setInterval","clearInterval","Math","floor","random","length","setState","react_default","a","createElement","className","Component","Status","numberQueensNeeded","queensOnBoard","gameStatus","statusClass","queensUnderAttack","Timer","currentTime","Date","valueOf","startTime","seconds","Title","href","gameHome","target","rel","gameName","gameVersion","EightQueens","onSquareClick","attack","includes","fenPosition","obj","pos","hasOwnProperty","search","code","validPositionObject","fen","currentRow","j","replace","squeezeFenEmptySquares","helpers","src_Title_0","src_Status_0","src_Timer_0","chessboard_min_default","id","key","sparePieces","draggable","calcWidth","_ref","screenWidth","pieces","bQ","_ref2","squareWidth","isDragging","style","width","height","src","queenUnderAttackSvg","alt","src_DidYouKnow_0","Boolean","window","location","hostname","match","ReactDOM","render","src_EightQueens_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d5628ac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/queenUnderAttack.b80b6116.svg\";","/**\r\n * Get array of positions of Queens under attack\r\n *\r\n * @param position\r\n * @returns {Array}\r\n */\r\nexport function underAttack(position) {\r\n    let attacked = [];\r\n    let positionArray = Object.keys(position);\r\n    Object.keys(position).forEach(function(square) {\r\n        let paths = getQueenPaths(square);\r\n        if (positionArray.some(r => paths.indexOf(r) >= 0)) {\r\n            attacked.push(square);\r\n        }\r\n    });\r\n\r\n    return attacked;\r\n}\r\n\r\n/**\r\n * Get all possible attack paths of a Queen\r\n *\r\n * @param square\r\n * @returns {Array}\r\n */\r\nexport function getQueenPaths(square) {\r\n    const col = square.substr(0,1); // Column, File, Letter\r\n    const row = parseInt(square.substr(1,1)); // Row, Rank, Number\r\n\r\n    let queenPaths = [];\r\n    let i;\r\n\r\n    for (i = 1; i <= 8; i++) { // row\r\n        if (i !== row) {\r\n            queenPaths.push([col] + i);\r\n        }\r\n    }\r\n\r\n    for (i = 1; i <= 8; i++) { // column\r\n        if (numberToAlpha(i) !== col) {\r\n            queenPaths.push(numberToAlpha(i) + row);\r\n        }\r\n    }\r\n\r\n    if (col !== 'h' && row !== 8) { // diagonal up right\r\n        let colWalk = col;\r\n        let rowStart = row + 1;\r\n        for (let rowWalk = rowStart; rowWalk <= 8; rowWalk++) {\r\n            colWalk = incrementAlpha(colWalk);\r\n            if (colWalk === 'i') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'a' && row !== 8) { // diagonal up left\r\n        let colWalk = col;\r\n        let rowStart = row + 1;\r\n        for (let rowWalk = rowStart; rowWalk <= 8; rowWalk++) {\r\n            colWalk = decrementAlpha(colWalk);\r\n            if (colWalk === '`') { // ascii decimal: a=97 `=96\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'h' && row !== 1) { // diagonal down right\r\n        let colWalk = col;\r\n        let rowStart = row - 1;\r\n        for (let rowWalk = rowStart; rowWalk >= 1; rowWalk--) {\r\n            colWalk = incrementAlpha(colWalk);\r\n            if (colWalk === 'i') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'a' && row !== 1) { // diagonal down left\r\n        let colWalk = col;\r\n        let rowStart = row - 1;\r\n        for (let rowWalk = rowStart; rowWalk >= 1; rowWalk--) {\r\n            colWalk = decrementAlpha(colWalk);\r\n            if (colWalk === '`') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    return queenPaths;\r\n}\r\n\r\n/**\r\n * Convert numbers into chess alphabet\r\n * @param number\r\n * @returns {string}\r\n */\r\nexport function numberToAlpha(number) {\r\n    switch (number) {\r\n        case 1: return 'a';\r\n        case 2: return 'b';\r\n        case 3: return 'c';\r\n        case 4: return 'd';\r\n        case 5: return 'e';\r\n        case 6: return 'f';\r\n        case 7: return 'g';\r\n        case 8: return 'h';\r\n        default: return ''; // ERROR\r\n    }\r\n}\r\n\r\n/**\r\n * increment a, b, c, d, e, f, g, h, (i)\r\n * @param alpha\r\n * @returns {string}\r\n */\r\nexport function incrementAlpha(alpha) {\r\n    return String.fromCharCode(alpha.charCodeAt(0) + 1);\r\n}\r\n\r\n/**\r\n * decrement h, g, f, e, d, c, b, a, (`)\r\n * @param alpha\r\n * @returns {string}\r\n */\r\nexport function decrementAlpha(alpha) {\r\n    return String.fromCharCode(alpha.charCodeAt(0) - 1);\r\n}\r\n","// Copy of https://github.com/willb335/chessboardjsx/blob/master/src/Chessboard/helpers.js\r\n// License: The MIT License (MIT) - Copyright (c) 2018 William J. Bashelor\r\n\r\nimport diff from 'deep-diff';\r\n\r\nexport const ItemTypes = { PIECE: 'piece' };\r\nexport const COLUMNS = 'abcdefgh'.split('');\r\n\r\nexport const constructPositionAttributes = (currentPosition, position) => {\r\n    const difference = diff(currentPosition, position);\r\n    const squaresAffected = difference.length;\r\n    const sourceSquare =\r\n        difference && difference[1] && difference && difference[1].kind === 'D'\r\n            ? difference[1].path && difference[1].path[0]\r\n            : difference[0].path && difference[0].path[0];\r\n    const targetSquare =\r\n        difference && difference[1] && difference && difference[1].kind === 'D'\r\n            ? difference[0] && difference[0].path[0]\r\n            : difference[1] && difference[1].path[0];\r\n    const sourcePiece =\r\n        difference && difference[1] && difference && difference[1].kind === 'D'\r\n            ? difference[1] && difference[1].lhs\r\n            : difference[1] && difference[1].rhs;\r\n    return { sourceSquare, targetSquare, sourcePiece, squaresAffected };\r\n};\r\n\r\nfunction isString(s) {\r\n    return typeof s === 'string';\r\n}\r\n\r\nexport function fenToObj(fen) {\r\n    if (!validFen(fen)) return false;\r\n    // cut off any move, castling, etc info from the end\r\n    // we're only interested in position information\r\n    fen = fen.replace(/ .+$/, '');\r\n\r\n    let rows = fen.split('/');\r\n    let position = {};\r\n\r\n    let currentRow = 8;\r\n    for (let i = 0; i < 8; i++) {\r\n        let row = rows[i].split('');\r\n        let colIdx = 0;\r\n\r\n        // loop through each character in the FEN section\r\n        for (let j = 0; j < row.length; j++) {\r\n            // number / empty squares\r\n            if (row[j].search(/[1-8]/) !== -1) {\r\n                let numEmptySquares = parseInt(row[j], 10);\r\n                colIdx = colIdx + numEmptySquares;\r\n            } else {\r\n                // piece\r\n                let square = COLUMNS[colIdx] + currentRow;\r\n                position[square] = fenToPieceCode(row[j]);\r\n                colIdx = colIdx + 1;\r\n            }\r\n        }\r\n\r\n        currentRow = currentRow - 1;\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction expandFenEmptySquares(fen) {\r\n    return fen\r\n        .replace(/8/g, '11111111')\r\n        .replace(/7/g, '1111111')\r\n        .replace(/6/g, '111111')\r\n        .replace(/5/g, '11111')\r\n        .replace(/4/g, '1111')\r\n        .replace(/3/g, '111')\r\n        .replace(/2/g, '11');\r\n}\r\n\r\nexport function validFen(fen) {\r\n    if (!isString(fen)) return false;\r\n\r\n    // cut off any move, castling, etc info from the end\r\n    // we're only interested in position information\r\n    fen = fen.replace(/ .+$/, '');\r\n\r\n    // expand the empty square numbers to just 1s\r\n    fen = expandFenEmptySquares(fen);\r\n\r\n    // FEN should be 8 sections separated by slashes\r\n    let chunks = fen.split('/');\r\n    if (chunks.length !== 8) return false;\r\n\r\n    // check each section\r\n    for (let i = 0; i < 8; i++) {\r\n        if (chunks[i].length !== 8 || chunks[i].search(/[^kqrnbpKQRNBP1]/) !== -1) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// convert FEN piece code to bP, wK, etc\r\nfunction fenToPieceCode(piece) {\r\n    // black piece\r\n    if (piece.toLowerCase() === piece) {\r\n        return 'b' + piece.toUpperCase();\r\n    }\r\n\r\n    // white piece\r\n    return 'w' + piece.toUpperCase();\r\n}\r\n\r\nfunction validSquare(square) {\r\n    return isString(square) && square.search(/^[a-h][1-8]$/) !== -1;\r\n}\r\n\r\nfunction validPieceCode(code) {\r\n    return isString(code) && code.search(/^[bw][KQRNBP]$/) !== -1;\r\n}\r\n\r\nexport function validPositionObject(pos) {\r\n    if (pos === null || typeof pos !== 'object') return false;\r\n\r\n    for (let i in pos) {\r\n        if (!pos.hasOwnProperty(i)) continue;\r\n\r\n        if (!validSquare(i) || !validPieceCode(pos[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction squeezeFenEmptySquares(fen) {\r\n    return fen\r\n        .replace(/11111111/g, '8')\r\n        .replace(/1111111/g, '7')\r\n        .replace(/111111/g, '6')\r\n        .replace(/11111/g, '5')\r\n        .replace(/1111/g, '4')\r\n        .replace(/111/g, '3')\r\n        .replace(/11/g, '2');\r\n}\r\n\r\n// convert bP, wK, etc code to FEN structure\r\nfunction pieceCodeToFen(piece) {\r\n    let pieceCodeLetters = piece.split('');\r\n\r\n    // white piece\r\n    if (pieceCodeLetters[0] === 'w') {\r\n        return pieceCodeLetters[1].toUpperCase();\r\n    }\r\n\r\n    // black piece\r\n    return pieceCodeLetters[1].toLowerCase();\r\n}\r\n\r\n// position object to FEN string\r\n// returns false if the obj is not a valid position object\r\nexport function objToFen(obj) {\r\n    if (!validPositionObject(obj)) return false;\r\n\r\n    let fen = '';\r\n\r\n    let currentRow = 8;\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let square = COLUMNS[j] + currentRow;\r\n\r\n            // piece exists\r\n            if (obj.hasOwnProperty(square)) {\r\n                fen = fen + pieceCodeToFen(obj[square]);\r\n            } else {\r\n                // empty space\r\n                fen = fen + '1';\r\n            }\r\n        }\r\n\r\n        if (i !== 7) {\r\n            fen = fen + '/';\r\n        }\r\n\r\n        currentRow = currentRow - 1;\r\n    }\r\n\r\n    // squeeze the empty numbers together\r\n    fen = squeezeFenEmptySquares(fen);\r\n\r\n    return fen;\r\n}\r\n","/**\r\n * Eight Queens chess game\r\n * Did You Know box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './DidYouKnow.css';\r\n\r\nconst tidbits = [\r\n    // following tidbits modified from https://en.wikipedia.org/wiki/Eight_queens_puzzle\r\n    // License: Creative Commons Attribution-ShareAlike License\r\n    \"The eight queens puzzle is an example of the n queens problem of placing n non-attacking queens on an n×n chessboard.\",\r\n    \"Chess composer Max Bezzel published the original eight queens puzzle in 1848.\",\r\n    \"Franz Nauck published the first solutions to the eight queens puzzle in 1850.\",\r\n    \"Many mathematicians, including Carl Friedrich Gauss, have worked on both the eight queens puzzle and its generalized n-queens version.\",\r\n    \"In 1874, S. Gunther proposed a method using determinants to find solutions to the eight queens puzzle.\",\r\n    \"In 1972, Edsger Dijkstra used the eight queens problem to illustrate the power of structured programming.\",\r\n    \"The problem of finding all solutions to the 8-queens problem can be computationally expensive.\",\r\n    \"There are 4,426,165,368 possible arrangements of eight queens on an 8×8 board.\",\r\n    \"There are 92 solutions to the eight queens problem!\",\r\n    \"If solutions that differ only by the symmetry operations of rotation and reflection are counted as one, the puzzle has 12 solutions.\",\r\n    \"A fundamental solution usually has eight variants (including its original form) obtained by rotating 90, 180, or 270° and then reflecting each of the four rotational variants in a mirror in a fixed position.\",\r\n    \"Finding all solutions to the eight queens puzzle is a good example of a simple but nontrivial problem.\",\r\n    \"Eight queens is often used as an example problem for various programming techniques, including nontraditional approaches such as constraint programming, logic programming or genetic algorithms.\",\r\n    \"Eight queens can be solved with a recursive algorithm, by phrasing the n queens problem inductively in terms of adding a single queen to any solution to the problem of placing n−1 queens on an n×n chessboard.\",\r\n    \"In 1976 Niklaus Wirth wrote a Pascal program to find one solution to the eight queens puzzle\",\r\n    // following tidbits from Attogram Project:\r\n    \"Hint: how does a knight move?\",\r\n    \"Is it a chess puzzle, a chess problem, or a chess game?  Who cares, just play!\",\r\n];\r\n\r\nclass DidYouKnow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tidbit: ''\r\n        };\r\n\r\n        this.tick = this.tick.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer = setInterval(this.tick, 5000); // 5 seconds\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    tick() {\r\n        const tidbit = tidbits[Math.floor(Math.random() * (tidbits.length))];\r\n        this.setState({ tidbit: tidbit });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"EightQueens-didyouknow\">\r\n                {this.state.tidbit}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DidYouKnow;\r\n","/**\r\n * Eight Queens chess game\r\n * Status box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Status.css';\r\n\r\nclass Status extends Component {\r\n    render() {\r\n        const numberQueensNeeded = 8 - this.props.queensOnBoard;\r\n        let gameStatus = numberQueensNeeded + ' Queen';\r\n        if (numberQueensNeeded > 1) {\r\n            gameStatus += 's';\r\n        }\r\n        gameStatus += ' needed';\r\n\r\n        let statusClass = 'EightQueens-playing';\r\n\r\n        if (!numberQueensNeeded) {\r\n            gameStatus = 'Not Solved';\r\n            statusClass = 'EightQueens-not';\r\n        }\r\n\r\n        if (this.props.queensOnBoard === 8 && this.props.queensUnderAttack === 0) {\r\n            gameStatus = '😃 SOLVED! YOU WIN';\r\n            statusClass = 'EightQueens-win';\r\n        }\r\n\r\n        return (\r\n            <div className=\"EightQueens-status\">\r\n                <b>{this.props.queensOnBoard}</b> Queens on board\r\n                <br />\r\n                <b>{this.props.queensUnderAttack}</b> Queens attacked\r\n                <br />\r\n                <div className={statusClass}>{gameStatus}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Status;\r\n","/**\r\n * Eight Queens chess game\r\n * Timer box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Timer.css';\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTime: new Date().valueOf(),\r\n            startTime: new Date().valueOf(),\r\n        };\r\n\r\n        this.tick = this.tick.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer = setInterval(this.tick, 1000); // 1 second\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({ currentTime: new Date().valueOf() });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.gameStatus === 'solved') {\r\n            clearInterval(this.timer);\r\n        }\r\n\r\n        const seconds = Math.floor((this.state.currentTime - this.state.startTime) / 1000);\r\n\r\n        return (\r\n            <div className=\"EightQueens-timer\">\r\n                <small>{this.props.gameStatus}</small>\r\n                <br />\r\n                <b>{seconds}</b>\r\n                <br />\r\n                <small>seconds</small>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n","/**\r\n * Eight Queens chess game\r\n * Title box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Title.css';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"EightQueens-title\">\r\n                <a\r\n                    href={this.props.gameHome}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    {this.props.gameName}\r\n                    <br />\r\n                    <small>\r\n                        v{this.props.gameVersion}\r\n                    </small>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;\r\n","/**\r\n * Eight Queens chess game\r\n */\r\nimport React, { Component } from 'react';\r\nimport './EightQueens.css';\r\nimport * as attack from './UnderAttack.js';\r\nimport * as helpers from './helpers.js';\r\nimport Chessboard from 'chessboardjsx';\r\nimport DidYouKnow from \"./DidYouKnow\";\r\nimport Status from './Status.js';\r\nimport Timer from './Timer.js';\r\nimport Title from './Title.js';\r\nimport queenUnderAttackSvg from './queenUnderAttack.svg';\r\n\r\nconst gameName    = 'Eight Queens';\r\nconst gameVersion = '0.3.4';\r\nconst gameHome    = 'https://github.com/attogram/EightQueens';\r\n\r\nclass EightQueens extends Component {\r\n    /**\r\n     * @param props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            attacked: [], // Array of queens under attack\r\n            position: {}, // Object of current board position\r\n            gameStatus: 'playing',\r\n            queensOnBoard: 0,\r\n            queensUnderAttack: 0,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Player clicked on the chessboard\r\n     *\r\n     * @param square\r\n     */\r\n    onSquareClick = square => {\r\n        let position = this.state.position; // Get the current board position\r\n        if (position[[square]]) {\r\n            delete position[[square]]; // Clicked on a Queen, delete it\r\n        } else {\r\n            if (Object.keys(position).length === 8) {\r\n                return; // Max 8 queens on board\r\n            }\r\n            position[[square]] = 'wQ'; // Clicked on an empty square, add a Queen\r\n        }\r\n\r\n        const attacked = attack.underAttack(position); // get array of Queens under attack\r\n\r\n        Object.keys(position).forEach(function(square) { // For each queen on board\r\n           if (attacked.includes(square) && square !== 'bQ') {   // if Queen is under attack\r\n               position[square] = 'bQ';                          // Flip Queen under attack\r\n           } else if (square !== 'wQ') { // If Queen is no longer under attack\r\n               position[square] = 'wQ'; // Queen at peace\r\n           }\r\n        });\r\n\r\n        let queensOnBoard = Object.keys(position).length;\r\n        let queensUnderAttack = 0;\r\n        if (attacked) {\r\n            queensUnderAttack = attacked.length;\r\n        }\r\n        let gameStatus = 'playing';\r\n        if (queensOnBoard === 8 && queensUnderAttack === 0) {\r\n            gameStatus = 'solved';\r\n        }\r\n\r\n        this.setState({\r\n            attacked: attacked,\r\n            position: position,\r\n            queensOnBoard: queensOnBoard,\r\n            queensUnderAttack: queensUnderAttack,\r\n            gameStatus: gameStatus,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @returns {*}\r\n     */\r\n    render() {\r\n        // force board refresh by using FEN string in _position_ and _key_ Chessboard props\r\n        const fenPosition = helpers.objToFen(this.state.position);\r\n        return (\r\n            <div className=\"EightQueens\">\r\n                <div className=\"EightQueens-header\">\r\n                    <Title\r\n                        gameName={gameName}\r\n                        gameHome={gameHome}\r\n                        gameVersion={gameVersion}\r\n                    />\r\n                    <Status\r\n                        queensOnBoard={this.state.queensOnBoard}\r\n                        queensUnderAttack={this.state.queensUnderAttack}\r\n                    />\r\n                    <Timer\r\n                        gameStatus={this.state.gameStatus}\r\n                    />\r\n                </div>\r\n                <Chessboard\r\n                    id=\"EightQueens\"\r\n                    position={fenPosition}\r\n                    key={fenPosition}\r\n                    sparePieces={false}\r\n                    draggable={false}\r\n                    calcWidth={({screenWidth}) => (screenWidth < 500 ? 350 : 480)}\r\n                    onSquareClick={this.onSquareClick}\r\n                    pieces={{\r\n                        bQ: ({ squareWidth, isDragging }) => (\r\n                            <img\r\n                                style={{\r\n                                    width: isDragging ? squareWidth * 1.75 : squareWidth,\r\n                                    height: isDragging ? squareWidth * 1.75 : squareWidth\r\n                                }}\r\n                                src={queenUnderAttackSvg}\r\n                                alt={\"Under Attack\"}\r\n                            />\r\n                        )\r\n                    }}\r\n                />\r\n                <DidYouKnow />\r\n                <div className=\"EightQueens-instructions\">\r\n                    - Place <b>Eight Queens</b> with none under attack!<br />\r\n                    - Click a square to place a Queen<br />\r\n                    - Click a Queen to remove it\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EightQueens;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport EightQueens from './EightQueens';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<EightQueens />, document.getElementById('root'));\r\n\r\n// Offline-first Progressive Web App\r\n//  - uses serverWorker for faster page loads and offline play\r\n//  - See https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\r\n//serviceWorker.register();\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}