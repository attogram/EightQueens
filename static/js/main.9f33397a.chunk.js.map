{"version":3,"sources":["queenUnderAttack.svg","UnderAttack.js","Status.js","Title.js","EightQueens.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","underAttack","position","attacked","positionArray","Object","keys","forEach","square","paths","i","col","substr","row","parseInt","queenPaths","push","numberToAlpha","colWalk","rowStart","rowWalk","incrementAlpha","decrementAlpha","getQueenPaths","some","r","indexOf","number","alpha","String","fromCharCode","charCodeAt","Status","numberQueensNeeded","this","props","queensOnBoard","gameStatus","statusClass","queensUnderAttack","react_default","a","createElement","className","Component","Title","href","gameHome","target","rel","gameName","gameVersion","EightQueens","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSquareClick","state","length","attack","includes","setState","unmountChessboard","src_Title_0","src_Status_0","chessboard_min_default","id","sparePieces","draggable","undo","calcWidth","_ref","screenWidth","pieces","bQ","_ref2","squareWidth","isDragging","style","width","height","src","queenUnderAttackSvg","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_EightQueens_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f33397a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/queenUnderAttack.b80b6116.svg\";","/**\r\n * Get array of positions of Queens under attack\r\n *\r\n * @param position\r\n * @returns {Array}\r\n */\r\nexport function underAttack(position) {\r\n    let attacked = [];\r\n    let positionArray = Object.keys(position);\r\n    Object.keys(position).forEach(function(square) {\r\n        let paths = getQueenPaths(square);\r\n        if (positionArray.some(r => paths.indexOf(r) >= 0)) {\r\n            attacked.push(square);\r\n        }\r\n    });\r\n\r\n    return attacked;\r\n}\r\n\r\n/**\r\n * Get all possible attack paths of a Queen\r\n *\r\n * @param square\r\n * @returns {Array}\r\n */\r\nexport function getQueenPaths(square) {\r\n    const col = square.substr(0,1); // Column, File, Letter\r\n    const row = parseInt(square.substr(1,1)); // Row, Rank, Number\r\n\r\n    let queenPaths = [];\r\n    let i;\r\n\r\n    for (i = 1; i <= 8; i++) { // row\r\n        if (i !== row) {\r\n            queenPaths.push([col] + i);\r\n        }\r\n    }\r\n\r\n    for (i = 1; i <= 8; i++) { // column\r\n        if (numberToAlpha(i) !== col) {\r\n            queenPaths.push(numberToAlpha(i) + row);\r\n        }\r\n    }\r\n\r\n    if (col !== 'h' && row !== 8) { // diagonal up right\r\n        let colWalk = col;\r\n        let rowStart = row + 1;\r\n        for (let rowWalk = rowStart; rowWalk <= 8; rowWalk++) {\r\n            colWalk = incrementAlpha(colWalk);\r\n            if (colWalk === 'i') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'a' && row !== 8) { // diagonal up left\r\n        let colWalk = col;\r\n        let rowStart = row + 1;\r\n        for (let rowWalk = rowStart; rowWalk <= 8; rowWalk++) {\r\n            colWalk = decrementAlpha(colWalk);\r\n            if (colWalk === '`') { // ascii decimal: a=97 `=96\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'h' && row !== 1) { // diagonal down right\r\n        let colWalk = col;\r\n        let rowStart = row - 1;\r\n        for (let rowWalk = rowStart; rowWalk >= 1; rowWalk--) {\r\n            colWalk = incrementAlpha(colWalk);\r\n            if (colWalk === 'i') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'a' && row !== 1) { // diagonal down left\r\n        let colWalk = col;\r\n        let rowStart = row - 1;\r\n        for (let rowWalk = rowStart; rowWalk >= 1; rowWalk--) {\r\n            colWalk = decrementAlpha(colWalk);\r\n            if (colWalk === '`') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    return queenPaths;\r\n}\r\n\r\n/**\r\n * Convert numbers into chess alphabet\r\n * @param number\r\n * @returns {string}\r\n */\r\nexport function numberToAlpha(number) {\r\n    switch (number) {\r\n        case 1: return 'a';\r\n        case 2: return 'b';\r\n        case 3: return 'c';\r\n        case 4: return 'd';\r\n        case 5: return 'e';\r\n        case 6: return 'f';\r\n        case 7: return 'g';\r\n        case 8: return 'h';\r\n        default: return ''; // ERROR\r\n    }\r\n}\r\n\r\n/**\r\n * increment a, b, c, d, e, f, g, h, (i)\r\n * @param alpha\r\n * @returns {string}\r\n */\r\nexport function incrementAlpha(alpha) {\r\n    return String.fromCharCode(alpha.charCodeAt(0) + 1);\r\n}\r\n\r\n/**\r\n * decrement h, g, f, e, d, c, b, a, (`)\r\n * @param alpha\r\n * @returns {string}\r\n */\r\nexport function decrementAlpha(alpha) {\r\n    return String.fromCharCode(alpha.charCodeAt(0) - 1);\r\n}\r\n","/**\r\n * Eight Queens chess game\r\n * Status box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Status.css';\r\n\r\nclass Status extends Component {\r\n    render() {\r\n        const numberQueensNeeded = 8 - this.props.queensOnBoard;\r\n        let gameStatus = '‚ôï add ' + numberQueensNeeded + ' more Queen';\r\n        if (numberQueensNeeded > 1) {\r\n            gameStatus += 's';\r\n        }\r\n        if (!numberQueensNeeded) {\r\n            gameStatus = 'üôÅ Not Solved'\r\n        }\r\n\r\n        let statusClass = 'EightQueens-playing';\r\n        if (this.props.queensOnBoard === 8 && this.props.queensUnderAttack === 0) {\r\n            gameStatus = 'üòÉ SOLVED! YOU WIN! ';\r\n            statusClass = 'EightQueens-win';\r\n        }\r\n\r\n        return (\r\n            <div className=\"EightQueens-status\">\r\n                <b>{this.props.queensOnBoard}</b> Queens on board\r\n                <br />\r\n                <b>{this.props.queensUnderAttack}</b> Queens under attack\r\n                <br />\r\n                <div className={statusClass}>{gameStatus}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Status;\r\n","/**\r\n * Eight Queens chess game\r\n * Title box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Title.css';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"EightQueens-title\">\r\n                <a\r\n                    href={this.props.gameHome}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    {this.props.gameName}\r\n                    <br />\r\n                    <small>\r\n                        v{this.props.gameVersion}\r\n                    </small>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;\r\n","/**\r\n * Eight Queens chess game\r\n */\r\nimport React, { Component } from 'react';\r\nimport './EightQueens.css';\r\nimport * as attack from './UnderAttack.js';\r\nimport Chessboard from 'chessboardjsx';\r\nimport Status from './Status.js';\r\nimport Title from './Title.js';\r\nimport queenUnderAttackSvg from './queenUnderAttack.svg';\r\n\r\nconst gameName    = 'Eight Queens';\r\nconst gameVersion = '0.0.12';\r\nconst gameHome    = 'https://github.com/attogram/EightQueens';\r\n\r\nclass EightQueens extends Component {\r\n    /**\r\n     * @param props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            attacked: [], // Array of queens under attack\r\n            position: {}, // Object of current board position\r\n            unmountChessboard: false // unmount and remount Chessboard\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Player clicked on the chessboard\r\n     *\r\n     * @param square\r\n     */\r\n    onSquareClick = square => {\r\n        let position = this.state.position; // Get the current board position\r\n        if (position[[square]]) {\r\n            delete position[[square]]; // Clicked on a Queen, delete it\r\n        } else {\r\n            if (Object.keys(position).length === 8) {\r\n                return; // Max 8 queens on board\r\n            }\r\n            position[[square]] = 'wQ'; // Clicked on an empty square, add a Queen\r\n        }\r\n\r\n        const attacked = attack.underAttack(position); // get array of Queens under attack\r\n\r\n        Object.keys(position).forEach(function(square) { // For each queen on board\r\n           if (attacked.includes(square) && square !== 'bQ') {   // if Queen is under attack\r\n               position[square] = 'bQ';                          // Flip Queen under attack\r\n           } else if (square !== 'wQ') { // If Queen is no longer under attack\r\n               position[square] = 'wQ'; // Queen at peace\r\n           }\r\n        });\r\n\r\n        this.setState({ // unmount <Chessboard> to force updates\r\n            unmountChessboard: true\r\n        });\r\n\r\n        this.setState({ // remount <Chessboard> with new board position and attacked list\r\n            attacked: attacked,\r\n            position: position\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @returns {*}\r\n     */\r\n    render() {\r\n        if (this.state.unmountChessboard) {\r\n            this.setState({unmountChessboard: false});\r\n            return (<div className=\"EightQueens\" />);\r\n        }\r\n\r\n        const queensOnBoard = Object.keys(this.state.position).length;\r\n        let queensUnderAttack = 0;\r\n        if (this.state.attacked) {\r\n            queensUnderAttack = this.state.attacked.length;\r\n        }\r\n\r\n        return (\r\n            <div className=\"EightQueens\">\r\n                <div className=\"EightQueens-header\">\r\n                    <Title\r\n                        gameName={gameName}\r\n                        gameHome={gameHome}\r\n                        gameVersion={gameVersion}\r\n                    />\r\n                    <Status\r\n                        queensOnBoard={queensOnBoard}\r\n                        queensUnderAttack={queensUnderAttack}\r\n                    />\r\n                </div>\r\n                <Chessboard\r\n                    id=\"EightQueens\"\r\n                    position={this.state.position}\r\n                    sparePieces={false}\r\n                    draggable={false}\r\n                    undo={true}\r\n                    calcWidth={({screenWidth}) => (screenWidth < 500 ? 350 : 480)}\r\n                    onSquareClick={this.onSquareClick}\r\n                    pieces={{\r\n                        bQ: ({ squareWidth, isDragging }) => (\r\n                            <img\r\n                                style={{\r\n                                    width: isDragging ? squareWidth * 1.75 : squareWidth,\r\n                                    height: isDragging ? squareWidth * 1.75 : squareWidth\r\n                                }}\r\n                                src={queenUnderAttackSvg}\r\n                                alt={\"Under Attack\"}\r\n                            />\r\n                        )\r\n                    }}\r\n                />\r\n                <p>\r\n                    - Place <b>Eight Queens</b> with none under attack!<br />\r\n                    - Click a square to place a Queen<br />\r\n                    - Click a Queen to remove it\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EightQueens;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport EightQueens from './EightQueens';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<EightQueens />, document.getElementById('root'));\r\n\r\n// Offline-first Progressive Web App\r\n//  - uses serverWorker for faster page loads and offline play\r\n//  - See https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\r\n//serviceWorker.register();\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}