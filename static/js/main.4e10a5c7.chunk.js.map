{"version":3,"sources":["queenUnderAttack.svg","UnderAttack.js","helpers.js","DidYouKnow.js","Status.js","Tidbits.js","Timer.js","Title.js","EightQueens.js","serviceWorker.js","index.js"],"names":["module","exports","attackedSquares","position","Object","keys","forEach","square","getQueenPaths","indexOf","push","i","col","substr","row","parseInt","queenPaths","numberToAlpha","colWalk","rowWalk","incrementAlpha","decrementAlpha","number","alpha","String","fromCharCode","charCodeAt","COLUMNS","split","isString","s","pieceCodeToFen","piece","pieceCodeLetters","toUpperCase","toLowerCase","objToFen","obj","pos","hasOwnProperty","search","code","validPositionObject","fen","currentRow","j","replace","squeezeFenEmptySquares","didYouKnow","Status","numberQueensNeeded","this","props","queensOnBoard","gameStatus","statusClass","queensUnderAttack","className","Component","Tidbits","state","current","interval","order","tidbits","tick","bind","timer","setInterval","clearInterval","next","length","Math","floor","random","setState","React","Timer","currentTime","Date","valueOf","startTime","seconds","Title","href","gameHome","target","rel","gameName","gameVersion","EightQueens","onSquareClick","attacked","positionArray","paths","some","r","attack","includes","showAttackPaths","toggleAttackPaths","fenPosition","helpers","squareStyles","showAttackPathsText","background","id","key","sparePieces","draggable","calcWidth","screenWidth","pieces","bQ","squareWidth","isDragging","style","width","height","src","queenUnderAttackSvg","alt","didYouKnowArray","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,8C,+PCmBpC,SAASC,EAAgBC,GAC5B,IAAID,EAAkB,GAStB,OARAE,OAAOC,KAAKF,GAAUG,SAAQ,SAASC,GACnCC,EAAcD,GAAQD,SAAQ,SAASC,IACM,IAArCL,EAAgBO,QAAQF,IACxBL,EAAgBQ,KAAKH,SAK1BL,EASJ,SAASM,EAAcD,GAC1B,IAIII,EAJEC,EAAML,EAAOM,OAAO,EAAE,GACtBC,EAAMC,SAASR,EAAOM,OAAO,EAAE,IAEjCG,EAAa,GAGjB,IAAKL,EAAI,EAAGA,GAAK,EAAGA,IACZA,IAAMG,GACNE,EAAWN,KAAK,CAACE,GAAOD,GAIhC,IAAKA,EAAI,EAAGA,GAAK,EAAGA,IACZM,EAAcN,KAAOC,GACrBI,EAAWN,KAAKO,EAAcN,GAAKG,GAI3C,GAAY,MAARF,GAAuB,IAARE,EAGf,IAFA,IAAII,EAAUN,EAELO,EADML,EAAM,EACQK,GAAW,GAEpB,OADhBD,EAAUE,EAAeF,IADcC,IAKvCH,EAAWN,KAAKQ,EAAUC,GAIlC,GAAY,MAARP,GAAuB,IAARE,EAGf,IAFA,IAAII,EAAUN,EAELO,EADML,EAAM,EACQK,GAAW,GAEpB,OADhBD,EAAUG,EAAeH,IADcC,IAKvCH,EAAWN,KAAKQ,EAAUC,GAIlC,GAAY,MAARP,GAAuB,IAARE,EAGf,IAFA,IAAII,EAAUN,EAELO,EADML,EAAM,EACQK,GAAW,GAEpB,OADhBD,EAAUE,EAAeF,IADcC,IAKvCH,EAAWN,KAAKQ,EAAUC,GAIlC,GAAY,MAARP,GAAuB,IAARE,EAGf,IAFA,IAAII,EAAUN,EAELO,EADML,EAAM,EACQK,GAAW,GAEpB,OADhBD,EAAUG,EAAeH,IADcC,IAKvCH,EAAWN,KAAKQ,EAAUC,GAIlC,OAAOH,EAQJ,SAASC,EAAcK,GAC1B,OAAQA,GACJ,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,KAAK,EAAG,MAAO,IACf,QAAS,MAAO,IASjB,SAASF,EAAeG,GAC3B,OAAOC,OAAOC,aAAaF,EAAMG,WAAW,GAAK,GAQ9C,SAASL,EAAeE,GAC3B,OAAOC,OAAOC,aAAaF,EAAMG,WAAW,GAAK,G,SCxIxCC,EAAU,WAAWC,MAAM,IAoBxC,SAASC,EAASC,GACd,MAAoB,kBAANA,EAoHlB,SAASC,EAAeC,GACpB,IAAIC,EAAmBD,EAAMJ,MAAM,IAGnC,MAA4B,MAAxBK,EAAiB,GACVA,EAAiB,GAAGC,cAIxBD,EAAiB,GAAGE,cAKxB,SAASC,EAASC,GACrB,IAxCG,SAA6BC,GAChC,GAAY,OAARA,GAA+B,kBAARA,EAAkB,OAAO,EAEpD,IAAK,IAAI3B,KAAK2B,EACV,GAAKA,EAAIC,eAAe5B,MAXrBkB,EADUtB,EAcII,KAbyC,IAAnCJ,EAAOiC,OAAO,mBAIlCX,EADaY,EAUuBH,EAAI3B,MATa,IAAnC8B,EAAKD,OAAO,oBAU7B,OAAO,EAXnB,IAAwBC,EAJHlC,EAkBjB,OAAO,EA8BFmC,CAAoBL,GAAM,OAAO,EAKtC,IAHA,IAAIM,EAAM,GAENC,EAAa,EACRjC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAK,IAAIkC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAItC,EAASoB,EAAQkB,GAAKD,EAGtBP,EAAIE,eAAehC,GACnBoC,GAAYZ,EAAeM,EAAI9B,IAG/BoC,GAAY,IAIV,IAANhC,IACAgC,GAAY,KAGhBC,GAA0B,EAM9B,OAFAD,EArDJ,SAAgCA,GAC5B,OAAOA,EACFG,QAAQ,YAAa,KACrBA,QAAQ,WAAY,KACpBA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,KAClBA,QAAQ,QAAS,KACjBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,KA6CdC,CAAuBJ,G,qBC/GlBK,EApEI,CACf,GAGA,2HACA,gFACA,uEACA,gIACA,yGACA,4GACA,iGACA,oFACA,sDACA,qGACA,qDACA,yGACA,+EACA,6GACA,yDACA,+FAIA,qFACA,gGACA,iIACA,kDACA,4FACA,yDACA,oFACA,4GACA,sJACA,+HAMA,uEACA,kFACA,gJACA,6EACA,iFACA,0EACA,2HACA,mIACA,gFACA,0HAGA,2EACA,0IACA,6FACA,uEACA,6EACA,6DACA,4EAGA,gCACA,4DACA,oEACA,2GACA,iHACA,oCACA,2F,iBC9BWC,G,uLA/BP,IAAMC,EAAqB,EAAIC,KAAKC,MAAMC,cACtCC,EAAaJ,EAAqB,SAClCA,EAAqB,IACrBI,GAAc,KAElBA,GAAc,UAEd,IAAIC,EAAc,sBAYlB,OAVKL,IACDI,EAAa,aACbC,EAAc,mBAGe,IAA7BJ,KAAKC,MAAMC,eAAwD,IAAjCF,KAAKC,MAAMI,oBAC7CF,EAAa,+BACbC,EAAc,mBAId,yBAAKE,UAAU,sBACX,2BAAIN,KAAKC,MAAMC,eADnB,mBAEI,6BACA,2BAAIF,KAAKC,MAAMI,mBAHnB,mBAII,6BACA,yBAAKC,UAAWF,GAAcD,Q,GA3BzBI,cC+CNC,E,YA5CX,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KACDQ,MAAQ,CACTC,QAAU,EACVC,SAAU,EAAKV,MAAMU,SAAW,EAAKV,MAAMU,SAAW,IACtDC,MAAO,EAAKX,MAAMW,MAAQ,EAAKX,MAAMW,MAAQ,UAC7CC,QAAU,EAAKZ,MAAMY,QAAU,EAAKZ,MAAMY,QAAU,CAAC,0BAEzD,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBARG,E,iFAYff,KAAKgB,MAAQC,YAAYjB,KAAKc,KAAMd,KAAKS,MAAME,Y,6CAI/CO,cAAclB,KAAKgB,S,6BAInB,IAAIG,EACJ,OAAQnB,KAAKS,MAAMG,OACf,QACA,IAAK,UAEGO,EADAnB,KAAKS,MAAMC,SAAYV,KAAKS,MAAMI,QAAQO,OAAS,EAC5C,EAEApB,KAAKS,MAAMC,QAAU,EAEhC,MACJ,IAAK,SACDS,EAAOE,KAAKC,MAAMD,KAAKE,SAAYvB,KAAKS,MAAMI,QAAQO,QAG9DpB,KAAKwB,SAAS,CACVd,QAASS,M,+BAKb,OAAOnB,KAAKS,MAAMI,QAAQb,KAAKS,MAAMC,a,GAzCvBe,IAAMlB,WCwCbmB,G,kBAzCX,WAAYzB,GAAQ,IAAD,8BACf,4CAAMA,KACDQ,MAAQ,CACTkB,aAAa,IAAIC,MAAOC,UACxBC,WAAW,IAAIF,MAAOC,WAG1B,EAAKf,KAAO,EAAKA,KAAKC,KAAV,gBAPG,E,iFAWff,KAAKgB,MAAQC,YAAYjB,KAAKc,KAAM,O,6CAIpCI,cAAclB,KAAKgB,S,6BAInBhB,KAAKwB,SAAS,CAAEG,aAAa,IAAIC,MAAOC,c,+BAIV,WAA1B7B,KAAKC,MAAME,YACXe,cAAclB,KAAKgB,OAGvB,IAAMe,EAAUV,KAAKC,OAAOtB,KAAKS,MAAMkB,YAAc3B,KAAKS,MAAMqB,WAAa,KAE7E,OACI,yBAAKxB,UAAU,qBACX,+BAAQN,KAAKC,MAAME,YACnB,6BACA,2BAAI4B,GACJ,6BACA,+C,GApCIxB,cCoBLyB,G,uLAlBP,OACI,yBAAK1B,UAAU,qBACX,uBACI2B,KAAMjC,KAAKC,MAAMiC,SACjBC,OAAO,SACPC,IAAI,uBAEHpC,KAAKC,MAAMoC,SACZ,6BACA,mCACMrC,KAAKC,MAAMqC,mB,GAZjB/B,cCoLLgC,E,YAnKX,WAAYtC,GAAQ,IAAD,8BACf,4CAAMA,KAmBVuC,cAAgB,SAAApF,GACZ,IAAIJ,EAAW,EAAKyD,MAAMzD,SAC1B,GAAIA,EAAS,CAACI,WACHJ,EAAS,CAACI,QACd,CACH,GAAqC,IAAjCH,OAAOC,KAAKF,GAAUoE,OACtB,OAEJpE,EAAS,CAACI,IAAW,KAGzB,IAAMqF,EPjDP,SAAqBzF,GACxB,IAAIyF,EAAW,GACXC,EAAgBzF,OAAOC,KAAKF,GAQhC,OAPAC,OAAOC,KAAKF,GAAUG,SAAQ,SAASC,GACnC,IAAIuF,EAAQtF,EAAcD,GACtBsF,EAAcE,MAAK,SAAAC,GAAC,OAAIF,EAAMrF,QAAQuF,IAAM,MAC5CJ,EAASlF,KAAKH,MAIfqF,EOuCcK,CAAmB9F,GAEpCC,OAAOC,KAAKF,GAAUG,SAAQ,SAASC,GAChCqF,EAASM,SAAS3F,IAAsB,OAAXA,EAC7BJ,EAASI,GAAU,KACD,OAAXA,IACPJ,EAASI,GAAU,SAI1B,IAAI8C,EAAgBjD,OAAOC,KAAKF,GAAUoE,OACtCf,EAAoB,EACpBoC,IACApC,EAAoBoC,EAASrB,QAEjC,IAAIjB,EAAa,UACK,IAAlBD,GAA6C,IAAtBG,IACvBF,EAAa,UAGjB,EAAKqB,SAAS,CACViB,SAAUA,EACVzF,SAAUA,EACVkD,cAAeA,EACfG,kBAAmBA,EACnBtD,gBAAiB+F,EAAuB9F,GACxCmD,WAAYA,KAvDhB,EAAKM,MAAQ,CACTgC,SAAU,GACVzF,SAAU,GACVmD,WAAY,UACZD,cAAe,EACfG,kBAAmB,EACnB2C,iBAAiB,EACjBjG,gBAAiB,GAErB,EAAKyF,cAAgB,EAAKA,cAAczB,KAAnB,gBACrB,EAAKkC,kBAAoB,EAAKA,kBAAkBlC,KAAvB,gBAZV,E,iFAiEf,IAAMiC,GAAmBhD,KAAKS,MAAMuC,gBAChCjG,EAAkBiD,KAAKS,MAAM1D,gBAC5BiG,IACDjG,EAAkB+F,EAAuB9C,KAAKS,MAAMzD,WAExDgD,KAAKwB,SAAS,CACVwB,gBAAiBA,EACjBjG,gBAAiBA,M,+BASrB,IAAMmG,EAAcC,EAAiBnD,KAAKS,MAAMzD,UAG5CoG,EAAe,GACfC,EAAsB,OAY1B,OAXIrD,KAAKS,MAAMuC,kBACXK,EAAsB,OAClBrD,KAAKS,MAAM1D,gBAAgBqE,QAC3BpB,KAAKS,MAAM1D,gBAAgBI,SAAQ,SAASC,GACxCgG,EAAahG,GAAS,CAClBkG,WAAY,wDAOxB,yBAAKhD,UAAU,eACX,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CACI+B,SA7GJ,eA8GIH,SA5GJ,0CA6GII,YA9GJ,UAgHA,kBAAC,EAAD,CACIpC,cAAeF,KAAKS,MAAMP,cAC1BG,kBAAmBL,KAAKS,MAAMJ,oBAElC,kBAAC,EAAD,CACIF,WAAYH,KAAKS,MAAMN,cAG/B,kBAAC,IAAD,CACIoD,GAAG,cACHvG,SAAUkG,EACVM,IAAKN,EACLO,aAAa,EACbC,WAAW,EACXC,UAAW,qBAAEC,YAAgC,IAAM,IAAM,KACzDpB,cAAexC,KAAKwC,cACpBY,aAAcA,EACdS,OAAQ,CACJC,GAAI,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,WAAhB,OACA,yBACIC,MAAO,CACHC,MAAOF,EAA2B,KAAdD,EAAqBA,EACzCI,OAAQH,EAA2B,KAAdD,EAAqBA,GAE9CK,IAAKC,IACLC,IAAK,qBAKrB,yBAAKhE,UAAU,0BACX,kBAAC,EAAD,CACIK,SAAS,OACTC,MAAM,SACNC,QAAS0D,KAGjB,yBAAKjE,UAAU,4BAAf,WACY,2CADZ,2BAEI,6BAFJ,kEAKA,yBAAKA,UAAU,sBACX,4BACIA,UAAU,oBACVkE,QAASxE,KAAKiD,mBAEbI,EAJL,iBAMA,4BAAQ/C,UAAU,uBACd,uBAAG2B,KAAK,KAAR,kB,GA/JE1B,aCRNkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD2HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4e10a5c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/queenUnderAttack.b80b6116.svg\";","/**\r\n * Get array of positions of Queens under attack\r\n *\r\n * @param position\r\n * @returns {Array}\r\n */\r\nexport function underAttack(position) {\r\n    let attacked = [];\r\n    let positionArray = Object.keys(position);\r\n    Object.keys(position).forEach(function(square) {\r\n        let paths = getQueenPaths(square);\r\n        if (positionArray.some(r => paths.indexOf(r) >= 0)) {\r\n            attacked.push(square);\r\n        }\r\n    });\r\n\r\n    return attacked;\r\n}\r\n\r\nexport function attackedSquares(position) {\r\n    let attackedSquares = [];\r\n    Object.keys(position).forEach(function(square) {\r\n        getQueenPaths(square).forEach(function(square) {\r\n            if (attackedSquares.indexOf(square) === -1) {\r\n                attackedSquares.push(square);\r\n            }\r\n        });\r\n    });\r\n\r\n    return attackedSquares;\r\n}\r\n\r\n/**\r\n * Get all possible attack paths of a Queen\r\n *\r\n * @param square\r\n * @returns {Array}\r\n */\r\nexport function getQueenPaths(square) {\r\n    const col = square.substr(0,1); // Column, File, Letter\r\n    const row = parseInt(square.substr(1,1)); // Row, Rank, Number\r\n\r\n    let queenPaths = [];\r\n    let i;\r\n\r\n    for (i = 1; i <= 8; i++) { // row\r\n        if (i !== row) {\r\n            queenPaths.push([col] + i);\r\n        }\r\n    }\r\n\r\n    for (i = 1; i <= 8; i++) { // column\r\n        if (numberToAlpha(i) !== col) {\r\n            queenPaths.push(numberToAlpha(i) + row);\r\n        }\r\n    }\r\n\r\n    if (col !== 'h' && row !== 8) { // diagonal up right\r\n        let colWalk = col;\r\n        let rowStart = row + 1;\r\n        for (let rowWalk = rowStart; rowWalk <= 8; rowWalk++) {\r\n            colWalk = incrementAlpha(colWalk);\r\n            if (colWalk === 'i') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'a' && row !== 8) { // diagonal up left\r\n        let colWalk = col;\r\n        let rowStart = row + 1;\r\n        for (let rowWalk = rowStart; rowWalk <= 8; rowWalk++) {\r\n            colWalk = decrementAlpha(colWalk);\r\n            if (colWalk === '`') { // ascii decimal: a=97 `=96\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'h' && row !== 1) { // diagonal down right\r\n        let colWalk = col;\r\n        let rowStart = row - 1;\r\n        for (let rowWalk = rowStart; rowWalk >= 1; rowWalk--) {\r\n            colWalk = incrementAlpha(colWalk);\r\n            if (colWalk === 'i') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    if (col !== 'a' && row !== 1) { // diagonal down left\r\n        let colWalk = col;\r\n        let rowStart = row - 1;\r\n        for (let rowWalk = rowStart; rowWalk >= 1; rowWalk--) {\r\n            colWalk = decrementAlpha(colWalk);\r\n            if (colWalk === '`') {\r\n                break;\r\n            }\r\n            queenPaths.push(colWalk + rowWalk);\r\n        }\r\n    }\r\n\r\n    return queenPaths;\r\n}\r\n\r\n/**\r\n * Convert numbers into chess alphabet\r\n * @param number\r\n * @returns {string}\r\n */\r\nexport function numberToAlpha(number) {\r\n    switch (number) {\r\n        case 1: return 'a';\r\n        case 2: return 'b';\r\n        case 3: return 'c';\r\n        case 4: return 'd';\r\n        case 5: return 'e';\r\n        case 6: return 'f';\r\n        case 7: return 'g';\r\n        case 8: return 'h';\r\n        default: return ''; // ERROR\r\n    }\r\n}\r\n\r\n/**\r\n * increment a, b, c, d, e, f, g, h, (i)\r\n * @param alpha\r\n * @returns {string}\r\n */\r\nexport function incrementAlpha(alpha) {\r\n    return String.fromCharCode(alpha.charCodeAt(0) + 1);\r\n}\r\n\r\n/**\r\n * decrement h, g, f, e, d, c, b, a, (`)\r\n * @param alpha\r\n * @returns {string}\r\n */\r\nexport function decrementAlpha(alpha) {\r\n    return String.fromCharCode(alpha.charCodeAt(0) - 1);\r\n}\r\n","// Copy of https://github.com/willb335/chessboardjsx/blob/master/src/Chessboard/helpers.js\r\n// License: The MIT License (MIT) - Copyright (c) 2018 William J. Bashelor\r\n\r\nimport diff from 'deep-diff';\r\n\r\nexport const ItemTypes = { PIECE: 'piece' };\r\nexport const COLUMNS = 'abcdefgh'.split('');\r\n\r\nexport const constructPositionAttributes = (currentPosition, position) => {\r\n    const difference = diff(currentPosition, position);\r\n    const squaresAffected = difference.length;\r\n    const sourceSquare =\r\n        difference && difference[1] && difference && difference[1].kind === 'D'\r\n            ? difference[1].path && difference[1].path[0]\r\n            : difference[0].path && difference[0].path[0];\r\n    const targetSquare =\r\n        difference && difference[1] && difference && difference[1].kind === 'D'\r\n            ? difference[0] && difference[0].path[0]\r\n            : difference[1] && difference[1].path[0];\r\n    const sourcePiece =\r\n        difference && difference[1] && difference && difference[1].kind === 'D'\r\n            ? difference[1] && difference[1].lhs\r\n            : difference[1] && difference[1].rhs;\r\n    return { sourceSquare, targetSquare, sourcePiece, squaresAffected };\r\n};\r\n\r\nfunction isString(s) {\r\n    return typeof s === 'string';\r\n}\r\n\r\nexport function fenToObj(fen) {\r\n    if (!validFen(fen)) return false;\r\n    // cut off any move, castling, etc info from the end\r\n    // we're only interested in position information\r\n    fen = fen.replace(/ .+$/, '');\r\n\r\n    let rows = fen.split('/');\r\n    let position = {};\r\n\r\n    let currentRow = 8;\r\n    for (let i = 0; i < 8; i++) {\r\n        let row = rows[i].split('');\r\n        let colIdx = 0;\r\n\r\n        // loop through each character in the FEN section\r\n        for (let j = 0; j < row.length; j++) {\r\n            // number / empty squares\r\n            if (row[j].search(/[1-8]/) !== -1) {\r\n                let numEmptySquares = parseInt(row[j], 10);\r\n                colIdx = colIdx + numEmptySquares;\r\n            } else {\r\n                // piece\r\n                let square = COLUMNS[colIdx] + currentRow;\r\n                position[square] = fenToPieceCode(row[j]);\r\n                colIdx = colIdx + 1;\r\n            }\r\n        }\r\n\r\n        currentRow = currentRow - 1;\r\n    }\r\n\r\n    return position;\r\n}\r\n\r\nfunction expandFenEmptySquares(fen) {\r\n    return fen\r\n        .replace(/8/g, '11111111')\r\n        .replace(/7/g, '1111111')\r\n        .replace(/6/g, '111111')\r\n        .replace(/5/g, '11111')\r\n        .replace(/4/g, '1111')\r\n        .replace(/3/g, '111')\r\n        .replace(/2/g, '11');\r\n}\r\n\r\nexport function validFen(fen) {\r\n    if (!isString(fen)) return false;\r\n\r\n    // cut off any move, castling, etc info from the end\r\n    // we're only interested in position information\r\n    fen = fen.replace(/ .+$/, '');\r\n\r\n    // expand the empty square numbers to just 1s\r\n    fen = expandFenEmptySquares(fen);\r\n\r\n    // FEN should be 8 sections separated by slashes\r\n    let chunks = fen.split('/');\r\n    if (chunks.length !== 8) return false;\r\n\r\n    // check each section\r\n    for (let i = 0; i < 8; i++) {\r\n        if (chunks[i].length !== 8 || chunks[i].search(/[^kqrnbpKQRNBP1]/) !== -1) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// convert FEN piece code to bP, wK, etc\r\nfunction fenToPieceCode(piece) {\r\n    // black piece\r\n    if (piece.toLowerCase() === piece) {\r\n        return 'b' + piece.toUpperCase();\r\n    }\r\n\r\n    // white piece\r\n    return 'w' + piece.toUpperCase();\r\n}\r\n\r\nfunction validSquare(square) {\r\n    return isString(square) && square.search(/^[a-h][1-8]$/) !== -1;\r\n}\r\n\r\nfunction validPieceCode(code) {\r\n    return isString(code) && code.search(/^[bw][KQRNBP]$/) !== -1;\r\n}\r\n\r\nexport function validPositionObject(pos) {\r\n    if (pos === null || typeof pos !== 'object') return false;\r\n\r\n    for (let i in pos) {\r\n        if (!pos.hasOwnProperty(i)) continue;\r\n\r\n        if (!validSquare(i) || !validPieceCode(pos[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction squeezeFenEmptySquares(fen) {\r\n    return fen\r\n        .replace(/11111111/g, '8')\r\n        .replace(/1111111/g, '7')\r\n        .replace(/111111/g, '6')\r\n        .replace(/11111/g, '5')\r\n        .replace(/1111/g, '4')\r\n        .replace(/111/g, '3')\r\n        .replace(/11/g, '2');\r\n}\r\n\r\n// convert bP, wK, etc code to FEN structure\r\nfunction pieceCodeToFen(piece) {\r\n    let pieceCodeLetters = piece.split('');\r\n\r\n    // white piece\r\n    if (pieceCodeLetters[0] === 'w') {\r\n        return pieceCodeLetters[1].toUpperCase();\r\n    }\r\n\r\n    // black piece\r\n    return pieceCodeLetters[1].toLowerCase();\r\n}\r\n\r\n// position object to FEN string\r\n// returns false if the obj is not a valid position object\r\nexport function objToFen(obj) {\r\n    if (!validPositionObject(obj)) return false;\r\n\r\n    let fen = '';\r\n\r\n    let currentRow = 8;\r\n    for (let i = 0; i < 8; i++) {\r\n        for (let j = 0; j < 8; j++) {\r\n            let square = COLUMNS[j] + currentRow;\r\n\r\n            // piece exists\r\n            if (obj.hasOwnProperty(square)) {\r\n                fen = fen + pieceCodeToFen(obj[square]);\r\n            } else {\r\n                // empty space\r\n                fen = fen + '1';\r\n            }\r\n        }\r\n\r\n        if (i !== 7) {\r\n            fen = fen + '/';\r\n        }\r\n\r\n        currentRow = currentRow - 1;\r\n    }\r\n\r\n    // squeeze the empty numbers together\r\n    fen = squeezeFenEmptySquares(fen);\r\n\r\n    return fen;\r\n}\r\n","/**\r\n * Eight Queens chess game\r\n * Did You Know\r\n */\r\n\r\nconst didYouKnow = [\r\n    \"\",\r\n    // following tidbits modified from <https://en.wikipedia.org/wiki/Eight_queens_puzzle>\r\n    // License: Creative Commons Attribution-ShareAlike License\r\n    \"The eight queens puzzle is an example of the n queens problem of placing n non-attacking queens on an n×n chessboard.\",\r\n    \"Chess composer Max Bezzel published the original eight queens puzzle in 1848.\",\r\n    \"Franz Nauck published a solution to the eight queens puzzle in 1850.\",\r\n    \"Many mathematicians, including Carl Friedrich Gauss, have worked on the 8 queens puzzle and its generalized n-queens version.\",\r\n    \"In 1874, S. Gunther proposed a method using determinants to find solutions to the eight queens puzzle.\",\r\n    \"In 1972, Edsger Dijkstra used the eight queens problem to illustrate the power of structured programming.\",\r\n    \"The problem of finding all solutions to the 8-queens problem can be computationally expensive.\",\r\n    \"There are 4,426,165,368 possible arrangements of eight queens on an 8×8 board.\",\r\n    \"There are 92 solutions to the eight queens problem!\",\r\n    \"There are only 12 fundamental solutions if you ignore symmetry operations, rotation and reflection\",\r\n    \"A fundamental solution usually has eight variants.\",\r\n    \"Finding all solutions to the eight queens puzzle is a good example of a simple but nontrivial problem.\",\r\n    \"Eight queens is often used as an example problem for programming techniques.\",\r\n    \"8 queens is often an example problem for constraint programming, logic programming and genetic algorithms.\",\r\n    \"Eight queens can be solved with a recursive algorithm.\",\r\n    \"In 1976 Niklaus Wirth wrote a Pascal program to find one solution to the eight queens puzzle\",\r\n    // following tidbits modified from <http://csplib.org/Problems/prob054/>\r\n    //   by Bilal Syed Hussain\r\n    // License: Creative Commons Attribution 4.0 International License.\r\n    \"The eight queens problem is extremely well studied in the mathematical literature.\",\r\n    \"In chess a queen attacks other squares on the same row, column, or either diagonal as itself.\",\r\n    \"The n-queens problem is to find a set of n locations on a chessboard, no two of which are on the same row, column or diagonal.\",\r\n    \"The eight queens problem has inherent symmetry.\",\r\n    \"For any solution we obtain another solution by any of the 8 symmetries of the chessboard.\",\r\n    \"The n-queens problem is solvable for n=1 and n≥4.\",\r\n    \"A solution to the n-queens problem for any n≠2,3 was given in 1874 by Pauls.\",\r\n    \"The parameter n for n-queens only needs log(n) bits to specify, so O(n) is exponential in the input size.\",\r\n    \"The number of symmetrically distinct solutions to the n-queens problem is Sequence number A002562 in the On-Line Encyclopedia of Integer Sequences.\",\r\n    \"The number of solutions to the n-queens problem is Sequence number A000170 in the On-Line Encyclopedia of Integer Sequences.\",\r\n    // following tidbits modified from:\r\n    //   Taheri Sarvetamin M, Khatibi A, Zahedi MA.\r\n    //   A New Approach to Solve N-Queen Problem with Parallel Genetic Algorithm.\r\n    //   J. ADV COMP ENG TECHNOL, 4(2) Spring 2018 : 69-78\r\n    // License: Creative Commons Attribution 4.0 International Licence.\r\n    \"The N-Queen problem is a well-known Constraint Satisfaction Problem.\",\r\n    \"Traditional methods of solving the N-queens problem are based on back-tracking.\",\r\n    \"The N-Queen problem shows a large class of nondeterministic problems that cannot be solved using deterministic algorithms in reasonable time.\",\r\n    \"Many algorithms and methods have been used to resolve the n-Queen problem.\",\r\n    \"Ahrabian et al. used the DNA Sticker algorithm to resolve the n-Queen problem.\",\r\n    \"Khan et al. used the ant colony algorithm to solve the n-Queen problem.\",\r\n    \"Farhan et al. used a genetic algorithm to solve this problem and found all 92 possible solutions to the 8-queen problem.\",\r\n    \"A depth-first search backtracking algorithm may resolve the n-Queens problem in acceptable time, but just for small values of n.\",\r\n    \"The n-Queen problem can be successfully run with parallel genetic algorithms.\",\r\n    \"The n-Queens problem is a traditional intractable problem that is used to discuss numerous kinds of searching problems.\",\r\n    // following tidbits modified from <https://upjoke.com/chess-jokes>\r\n    // License: acquiescence\r\n    \"If you forget the rules of Chess don't worry... you're allowed to check.\",\r\n    \"So the other day in the lobby I hear two chess masters bragging about their past wins.  They were chess nuts boasting in an open foyer.\",\r\n    \"I went to lunch with a champion chess player.  It took them 8 minutes to pass me the salt.\",\r\n    \"Finally got a job making chess pieces.  I start on nights next week.\",\r\n    \"A computer beat me at chess.  But I really got the better of it in boxing.\",\r\n    \"Why shouldn't you eat a chess sandwich?  It's stale, mate.\",\r\n    \"Why did the chess player throw away his bread?  Because it was stalemate.\",\r\n    // following tidbits from EightQueens contributors\r\n    // License: MIT License\r\n    \"Hint: how does a knight move?\",\r\n    \"Is this a chess puzzle, a chess problem, or a chess game?\",\r\n    \"Of the 92 possible solutions, there are 12 fundamental solutions.\",\r\n    \"How to programmatically solve the 8 Queens problem is often used as a test during programmer interviews.\",\r\n    \"How to programmatically solve the 8 Queens problem is often used as an assignment in computer science classes.\",\r\n    \"Mathematicians love eight queens.\",\r\n    \"Help, I'm stuck inside an interactive, virtualized, modularized cloud-based chess game!\",\r\n];\r\n\r\nexport default didYouKnow;\r\n","/**\r\n * Eight Queens chess game\r\n * Status box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Status.css';\r\n\r\nclass Status extends Component {\r\n    render() {\r\n        const numberQueensNeeded = 8 - this.props.queensOnBoard;\r\n        let gameStatus = numberQueensNeeded + ' Queen';\r\n        if (numberQueensNeeded > 1) {\r\n            gameStatus += 's';\r\n        }\r\n        gameStatus += ' needed';\r\n\r\n        let statusClass = 'EightQueens-playing';\r\n\r\n        if (!numberQueensNeeded) {\r\n            gameStatus = 'Not Solved';\r\n            statusClass = 'EightQueens-not';\r\n        }\r\n\r\n        if (this.props.queensOnBoard === 8 && this.props.queensUnderAttack === 0) {\r\n            gameStatus = '😃 SOLVED! YOU WIN';\r\n            statusClass = 'EightQueens-win';\r\n        }\r\n\r\n        return (\r\n            <div className=\"EightQueens-status\">\r\n                <b>{this.props.queensOnBoard}</b> Queens on board\r\n                <br />\r\n                <b>{this.props.queensUnderAttack}</b> Queens attacked\r\n                <br />\r\n                <div className={statusClass}>{gameStatus}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Status;\r\n","/**\r\n * React Tidbits - show ever-changing content\r\n * License: MIT\r\n * Repository: https://github.com/attogram/react-tidbits\r\n * v0.0.8-eightqueens.1\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nclass Tidbits extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            current : 0,\r\n            interval: this.props.interval ? this.props.interval : 5000,\r\n            order: this.props.order ? this.props.order : 'ordered',\r\n            tidbits : this.props.tidbits ? this.props.tidbits : ['404 Tidbits Not Found'],\r\n        };\r\n        this.tick = this.tick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timer = setInterval(this.tick, this.state.interval);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    tick() {\r\n        let next;\r\n        switch (this.state.order) {\r\n            default:\r\n            case 'ordered':\r\n                if (this.state.current >= (this.state.tidbits.length - 1)) {\r\n                    next = 0;\r\n                } else {\r\n                    next = this.state.current + 1;\r\n                }\r\n                break;\r\n            case 'random':\r\n                next = Math.floor(Math.random() * (this.state.tidbits.length));\r\n                break;\r\n        }\r\n        this.setState({\r\n            current: next\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return this.state.tidbits[this.state.current];\r\n    }\r\n}\r\n\r\nexport default Tidbits;\r\n","/**\r\n * Eight Queens chess game\r\n * Timer box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Timer.css';\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentTime: new Date().valueOf(),\r\n            startTime: new Date().valueOf(),\r\n        };\r\n\r\n        this.tick = this.tick.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer = setInterval(this.tick, 1000); // 1 second\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    tick() {\r\n        this.setState({ currentTime: new Date().valueOf() });\r\n    }\r\n\r\n    render() {\r\n        if (this.props.gameStatus === 'solved') {\r\n            clearInterval(this.timer);\r\n        }\r\n\r\n        const seconds = Math.floor((this.state.currentTime - this.state.startTime) / 1000);\r\n\r\n        return (\r\n            <div className=\"EightQueens-timer\">\r\n                <small>{this.props.gameStatus}</small>\r\n                <br />\r\n                <b>{seconds}</b>\r\n                <br />\r\n                <small>seconds</small>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;\r\n","/**\r\n * Eight Queens chess game\r\n * Title box\r\n */\r\nimport React, { Component } from 'react';\r\nimport './Title.css';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"EightQueens-title\">\r\n                <a\r\n                    href={this.props.gameHome}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    {this.props.gameName}\r\n                    <br />\r\n                    <small>\r\n                        v{this.props.gameVersion}\r\n                    </small>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;\r\n","/**\r\n * Eight Queens chess game\r\n */\r\n\r\nimport './EightQueens.css';\r\nimport * as attack from './UnderAttack.js';\r\nimport * as helpers from './helpers.js';\r\nimport Chessboard from 'chessboardjsx';\r\nimport didYouKnowArray from './DidYouKnow.js';\r\nimport queenUnderAttackSvg from './queenUnderAttack.svg';\r\nimport React, { Component } from 'react';\r\nimport Status from './Status.js';\r\nimport Tidbits from './Tidbits';\r\nimport Timer from './Timer.js';\r\nimport Title from './Title.js';\r\n\r\nconst gameName    = 'Eight Queens';\r\nconst gameVersion = '0.6.0';\r\nconst gameHome    = 'https://github.com/attogram/EightQueens';\r\n\r\nclass EightQueens extends Component {\r\n    /**\r\n     * @param props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            attacked: [], // Array of queens under attack\r\n            position: {}, // Object of current board position\r\n            gameStatus: 'playing',\r\n            queensOnBoard: 0,\r\n            queensUnderAttack: 0,\r\n            showAttackPaths: false,\r\n            attackedSquares: 0,\r\n        };\r\n        this.onSquareClick = this.onSquareClick.bind(this);\r\n        this.toggleAttackPaths = this.toggleAttackPaths.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Player clicked on the chessboard\r\n     *\r\n     * @param square\r\n     */\r\n    onSquareClick = square => {\r\n        let position = this.state.position; // Get the current board position\r\n        if (position[[square]]) {\r\n            delete position[[square]]; // Clicked on a Queen, delete it\r\n        } else {\r\n            if (Object.keys(position).length === 8) {\r\n                return; // Max 8 queens on board\r\n            }\r\n            position[[square]] = 'wQ'; // Clicked on an empty square, add a Queen\r\n        }\r\n\r\n        const attacked = attack.underAttack(position); // get array of Queens under attack\r\n\r\n        Object.keys(position).forEach(function(square) { // For each queen on board\r\n           if (attacked.includes(square) && square !== 'bQ') {   // if Queen is under attack\r\n               position[square] = 'bQ';                          // Flip Queen under attack\r\n           } else if (square !== 'wQ') { // If Queen is no longer under attack\r\n               position[square] = 'wQ'; // Queen at peace\r\n           }\r\n        });\r\n\r\n        let queensOnBoard = Object.keys(position).length;\r\n        let queensUnderAttack = 0;\r\n        if (attacked) {\r\n            queensUnderAttack = attacked.length;\r\n        }\r\n        let gameStatus = 'playing';\r\n        if (queensOnBoard === 8 && queensUnderAttack === 0) {\r\n            gameStatus = 'solved';\r\n        }\r\n\r\n        this.setState({\r\n            attacked: attacked,\r\n            position: position,\r\n            queensOnBoard: queensOnBoard,\r\n            queensUnderAttack: queensUnderAttack,\r\n            attackedSquares: attack.attackedSquares(position),\r\n            gameStatus: gameStatus,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Play clicked the Attack Paths button\r\n     */\r\n    toggleAttackPaths() {\r\n        const showAttackPaths = !this.state.showAttackPaths;\r\n        let attackedSquares = this.state.attackedSquares;\r\n        if (!showAttackPaths) {\r\n            attackedSquares = attack.attackedSquares(this.state.position);\r\n        }\r\n        this.setState({\r\n            showAttackPaths: showAttackPaths,\r\n            attackedSquares: attackedSquares,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {*}\r\n     */\r\n    render() {\r\n        // force board refresh by using FEN string in _position_ and _key_ Chessboard props\r\n        const fenPosition = helpers.objToFen(this.state.position);\r\n\r\n        // Highlight squares under attack\r\n        let squareStyles = {};\r\n        let showAttackPathsText = 'Show';\r\n        if (this.state.showAttackPaths) {\r\n            showAttackPathsText = 'Hide';\r\n            if (this.state.attackedSquares.length) {\r\n                this.state.attackedSquares.forEach(function(square) {\r\n                    squareStyles[square]= {\r\n                        background: \"radial-gradient(circle, orange, transparent 50%)\",\r\n                    };\r\n                });\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"EightQueens\">\r\n                <div className=\"EightQueens-header\">\r\n                    <Title\r\n                        gameName={gameName}\r\n                        gameHome={gameHome}\r\n                        gameVersion={gameVersion}\r\n                    />\r\n                    <Status\r\n                        queensOnBoard={this.state.queensOnBoard}\r\n                        queensUnderAttack={this.state.queensUnderAttack}\r\n                    />\r\n                    <Timer\r\n                        gameStatus={this.state.gameStatus}\r\n                    />\r\n                </div>\r\n                <Chessboard\r\n                    id=\"EightQueens\"\r\n                    position={fenPosition}\r\n                    key={fenPosition}\r\n                    sparePieces={false}\r\n                    draggable={false}\r\n                    calcWidth={({screenWidth}) => (screenWidth < 500 ? 350 : 480)}\r\n                    onSquareClick={this.onSquareClick}\r\n                    squareStyles={squareStyles}\r\n                    pieces={{\r\n                        bQ: ({ squareWidth, isDragging }) => (\r\n                            <img\r\n                                style={{\r\n                                    width: isDragging ? squareWidth * 1.75 : squareWidth,\r\n                                    height: isDragging ? squareWidth * 1.75 : squareWidth\r\n                                }}\r\n                                src={queenUnderAttackSvg}\r\n                                alt={\"Under Attack\"}\r\n                            />\r\n                        )\r\n                    }}\r\n                />\r\n                <div className=\"EightQueens-didyouknow\">\r\n                    <Tidbits\r\n                        interval=\"8000\"\r\n                        order=\"random\"\r\n                        tidbits={didYouKnowArray}\r\n                    />\r\n                </div>\r\n                <div className=\"EightQueens-instructions\">\r\n                    - Place <b>Eight Queens</b> with none under attack!\r\n                    <br />\r\n                    - Click a square to place a Queen. Click a Queen to remove it.\r\n                </div>\r\n                <div className=\"EightQueens-header\">\r\n                    <button\r\n                        className=\"EightQueens-paths\"\r\n                        onClick={this.toggleAttackPaths}\r\n                    >\r\n                        {showAttackPathsText} attack paths\r\n                    </button>\r\n                    <button className=\"EightQueens-restart\">\r\n                        <a href=\".\" >Restart</a>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EightQueens;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport EightQueens from './EightQueens';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<EightQueens />, document.getElementById('root'));\r\n\r\n// Offline-first Progressive Web App\r\n//  - uses serverWorker for faster page loads and offline play\r\n//  - See https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\r\n//serviceWorker.register();\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}